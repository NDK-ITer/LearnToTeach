// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AuthenticationDbContext))]
    [Migration("20230926021133_addPropertyPhoneNumber")]
    partial class addPropertyPhoneNumber
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NomalizeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dd4da4a-ef7b-45dc-803e-8d28838847ca",
                            Description = "",
                            Name = "ADMIN",
                            NomalizeName = "Admin"
                        },
                        new
                        {
                            Id = "9af1df9b-4423-45f0-be02-874f4943a9d3",
                            Description = "",
                            Name = "USER",
                            NomalizeName = "User"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstEmail")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PresentEmail")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TokenAccess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            id = "193ba283-bf34-40ad-a3be-10b1780cba0e",
                            Birthday = new DateTime(2023, 9, 26, 9, 11, 33, 830, DateTimeKind.Local).AddTicks(6264),
                            CreatedDate = new DateTime(2023, 9, 26, 9, 11, 33, 830, DateTimeKind.Local).AddTicks(6276),
                            FirstEmail = "test001@gmail.com",
                            FirstName = "test",
                            IsLock = false,
                            IsVerified = true,
                            LastName = "account",
                            PasswordHash = "nSUQ/133didCpNJLsvcLvQ==",
                            PhoneNumber = "0123456789",
                            PresentEmail = "test001@gmail.com",
                            RoleId = "9af1df9b-4423-45f0-be02-874f4943a9d3",
                            TokenAccess = "F3BBC5126D578B41D3C49A0E91E1518B3C0CB18274DC3ABB35A3947A09FF42BBE176868F90C5609D9D92DB76319C5846B569A27F209B733125AA132A59205D68",
                            UserName = "testVersion_0001",
                            VerifiedDate = new DateTime(2023, 9, 26, 9, 11, 33, 830, DateTimeKind.Local).AddTicks(6328)
                        },
                        new
                        {
                            id = "2c75293b-f8e5-4862-9b13-5894a64895cd",
                            Birthday = new DateTime(2023, 9, 26, 9, 11, 33, 830, DateTimeKind.Local).AddTicks(6416),
                            CreatedDate = new DateTime(2023, 9, 26, 9, 11, 33, 830, DateTimeKind.Local).AddTicks(6417),
                            FirstEmail = "admin001@gmail.com",
                            FirstName = "Admin",
                            IsLock = false,
                            IsVerified = true,
                            LastName = "account",
                            PasswordHash = "VWBU8/+H4em26o8A92n+Tg==",
                            PhoneNumber = "0123456789",
                            PresentEmail = "admin001@gmail.com",
                            RoleId = "2dd4da4a-ef7b-45dc-803e-8d28838847ca",
                            TokenAccess = "506D7E16F7B68C4801F96446B44825C5711A87A007063BC1E58008BD64BB76A4C3FD6CF5F5EF81A3367DF1ABA417C4E10AF84F9C1786B5468769805944EE08FA",
                            UserName = "adminVersion_0001",
                            VerifiedDate = new DateTime(2023, 9, 26, 9, 11, 33, 830, DateTimeKind.Local).AddTicks(6422)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
