// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(UserServiceDbContext))]
    [Migration("20231106022438_UserService-initial")]
    partial class UserServiceinitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ClassroomInfor", b =>
                {
                    b.Property<string>("IdUser")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IdClassroom")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdUser", "IdClassroom");

                    b.ToTable("ClassroomInfor", (string)null);

                    b.HasData(
                        new
                        {
                            IdUser = "193ba283-bf34-40ad-a3be-10b1780cba0e",
                            IdClassroom = "ee546ce7-842a-4dee-86d0-0db1ff3b64b4",
                            Description = "",
                            IsHost = true,
                            Name = "Class_1"
                        },
                        new
                        {
                            IdUser = "2c75293b-f8e5-4862-9b13-5894a64895cd",
                            IdClassroom = "0a006921-b4a4-40de-a1e6-9497daf09a2f",
                            Description = "",
                            IsHost = true,
                            Name = "Class_2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3bfa0033-ec25-4271-9ca3-7f158bf5dab2",
                            Description = "",
                            Name = "ADMIN",
                            NormalizeName = "Admin"
                        },
                        new
                        {
                            Id = "fd62b292-ec16-4c4b-9e83-907a3e579041",
                            Description = "",
                            Name = "USER",
                            NormalizeName = "User"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstEmail")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PresentEmail")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TokenAccess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            id = "193ba283-bf34-40ad-a3be-10b1780cba0e",
                            Avatar = "",
                            Birthday = new DateTime(2023, 11, 6, 9, 24, 38, 137, DateTimeKind.Local).AddTicks(7063),
                            CreatedDate = new DateTime(2023, 11, 6, 9, 24, 38, 137, DateTimeKind.Local).AddTicks(7075),
                            FirstEmail = "test001@gmail.com",
                            FirstName = "test",
                            IsLock = false,
                            IsVerified = true,
                            LastName = "account",
                            PasswordHash = "nSUQ/133didCpNJLsvcLvQ==",
                            PhoneNumber = "0123456789",
                            PresentEmail = "test001@gmail.com",
                            RoleId = "fd62b292-ec16-4c4b-9e83-907a3e579041",
                            TokenAccess = "4C1745F0002B41D8CBFC286958F1B825F09F2CDE8A1359DC43C43401532E0EA09E76BBA37D49E913BC6590F197E2A2CB42E2EDFF95F8037F41220E5267737150",
                            UserName = "testVersion_0001",
                            VerifiedDate = new DateTime(2023, 11, 6, 9, 24, 38, 137, DateTimeKind.Local).AddTicks(7135)
                        },
                        new
                        {
                            id = "2c75293b-f8e5-4862-9b13-5894a64895cd",
                            Avatar = "",
                            Birthday = new DateTime(2023, 11, 6, 9, 24, 38, 137, DateTimeKind.Local).AddTicks(7223),
                            CreatedDate = new DateTime(2023, 11, 6, 9, 24, 38, 137, DateTimeKind.Local).AddTicks(7223),
                            FirstEmail = "admin001@gmail.com",
                            FirstName = "Admin",
                            IsLock = false,
                            IsVerified = true,
                            LastName = "account",
                            PasswordHash = "VWBU8/+H4em26o8A92n+Tg==",
                            PhoneNumber = "0123456789",
                            PresentEmail = "admin001@gmail.com",
                            RoleId = "3bfa0033-ec25-4271-9ca3-7f158bf5dab2",
                            TokenAccess = "62BAEE704AD866A50E5AFCBEBCB040BBF73D19657FF692EAB3B5C56D18A94C1C3D4A810A062F84AA21DC3A2631DD289925888731DD6E198D894762D3DCEEF424",
                            UserName = "adminVersion_0001",
                            VerifiedDate = new DateTime(2023, 11, 6, 9, 24, 38, 137, DateTimeKind.Local).AddTicks(7226)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ClassroomInfor", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("ListClassroomInfor")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("ListClassroomInfor");
                });
#pragma warning restore 612, 618
        }
    }
}
